apiVersion: backstage.io/v1beta2
kind: Template
metadata:
  name: gcp-template
  title: Google Cloud Platform infrastructure template
  description: Create a simple GCP stack
  tags:
    - gcp
    - gke
spec:
  owner: diego.braga86@gmail.com
  type: service

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: GCP stack values
      required:
        - component_id
        - description
        - networkRef
        - clusterRef
        - clusterNodesCount
        - cloudSqlRef
        - cloudSqlDatabaseVersion
        - cloudSqlRegion
        - cloudSqlTier
        - cloudSqlDataDiskType
        - cloudSqlDataDiskSizeGb
        - gcpProject
        - owner
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
        description:
          title: Description
          type: string
          description: Help others understand what this service does.
        networkRef:
          title: Network identifier
          type: string
          description: Network identifier
        clusterRef:
          title: Cluster identifier
          type: string
          description: Cluster identifier
        clusterNodesCount:
          title: Number of nodes of the cluster per region
          type: integer
          description: Number of nodes of the cluster per region
          default: 2
        cloudSqlRef:
          title: Cloud SQL identifier
          type: string
          description: Cloud SQL identifier
        cloudSqlDatabaseVersion:
          title: Cloud SQL Database version
          type: string
          description: Cloud SQL Database version
          default: POSTGRES_9_6
        cloudSqlRegion:
          title: Cloud SQL region
          type: string
          description: Cloud SQL region
          default: europe-west3
        cloudSqlTier:
          title: Cloud SQL tier
          type: string
          description: Cloud SQL tier
          default: db-custom-1-3840
        cloudSqlDataDiskType:
          title: Cloud SQL data disk type
          type: string
          description: Cloud SQL data disk type
          default: PD_SSD
        cloudSqlDataDiskSizeGb:
          title: Cloud SQL data disk size (GB)
          type: integer
          description: Cloud SQL data disk size (GB)
          default: 10
        gcpProject:
          title: Google Project ID where resources will be created
          type: string
          description: Google Project ID where resources will be created
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  # here's the steps that are executed in series in the scaffolder backend
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          component_id: "{{ parameters.component_id }}"
          description: "{{ parameters.description }}"
          networkRef: "{{ parameters.networkRef }}"
          clusterRef: "{{ parameters.clusterRef }}"
          clusterNodesCount: "{{ parameters.clusterNodesCount }}"
          cloudSqlRef: "{{ parameters.cloudSqlRef }}"
          cloudSqlDatabaseVersion: "{{ parameters.cloudSqlDatabaseVersion }}"
          cloudSqlRegion: "{{ parameters.cloudSqlRegion }}"
          cloudSqlTier: "{{ parameters.cloudSqlTier }}"
          cloudSqlDataDiskType: "{{ parameters.cloudSqlDataDiskType }}"
          cloudSqlDataDiskSizeGb: "{{ parameters.cloudSqlDataDiskSizeGb }}"
          gcpProject: "{{ parameters.gcpProject }}"
          owner: "{{ parameters.owner }}"
          destination: "{{ parseRepoUrl parameters.repoUrl }}"

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ["github.com"]
        description: "This is a GCP stack with name {{ parameters.component_id }}"
        repoUrl: "{{ parameters.repoUrl }}"
        repoVisibility: public

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: "{{ steps.publish.output.repoContentsUrl }}"
        catalogInfoPath: "/catalog-info.yaml"

    - id: argocd
      name: Create application on ArgoCD
      action: kerberus:argocd
      input:
        host: ${{parameters.repoUrl}}

    - id: githubprotection
      name: Set GitHub branch protection
      action: kerberus:githubprotection
      input:
        host: ${{parameters.repoUrl}}

  output:
    remoteUrl: "{{ steps.publish.output.remoteUrl }}"
    entityRef: "{{ steps.register.output.entityRef }}"
